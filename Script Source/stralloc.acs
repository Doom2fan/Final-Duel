// this was made by Ijon

#define STRALLOC_INPUTSTRING    192
#define STRALLOC_INPUTHELP      193

#define INPUTIDBASE 29050
#define INPUTCHARS  95

global int 0:strings[];
global int 9:stringIndex[];

int vInputChars[INPUTCHARS] = {97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 32};

int vOutputChars[128] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 77, 78, 79, 80, 81, 82, 83, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 84, 85, 86, 87, 88, 89, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 90, 91, 92, 93, -1};

int inputLock[32] = {0};

function int addString (int string) {
    int strSize = StrLen (string) + 1;  // gotta remember the null byte at the start

    int index = 0; int ret; int i = 0; int j; int c;
    
    int wIndex = findFreeIndex (strSize);

    for (i = 0; i < strSize; i++) {
        j = i + wIndex;

        strings[j] = GetChar (string, i);
    }

    strings[j + i] = 0;
    
    addIndex (wIndex);
    return wIndex;
}

function int addCleanString (int string) {
    int strSize = StrLen (string) + 1;

    int index = 0; int i = 0; int j = 0; int k = 0; int c; int ignoreNext;
    
    int wIndex = findFreeIndex (strSize);

    for (i = 0; i < strSize; i++) {
        c = GetChar (string, i);

        if ( ( ((c > 8) && (c < 14)) || ((c > 31) && (c < 127)) || ((c > 160) && (c < 173)) ) && !ignoreNext) {
            j = (k++) + wIndex;
            strings[j] = c;
        }
        else if (c == 28 && !ignoreNext) {
            ignoreNext = 1;
        }
        else {
            ignoreNext = 0;
        }
    }

    strings[j + 1] = 0;
    
    addIndex (wIndex);
    return wIndex;
}

function int addLowerString (int string) {
    int strSize = StrLen (string) + 1;

    int index = 0; int i = 0; int j = 0; int k = 0; int c; int ignoreNext;
    
    int wIndex = findFreeIndex (strSize);

    for (i = 0; i < strSize; i++) {
        c = GetChar (string, i);

        if ( ( ((c > 8) && (c < 14)) || ((c > 31) && (c < 127)) || ((c > 160) && (c < 173)) ) && !ignoreNext) {
            j = (k++) + wIndex;

            if ((c > 64) && (c < 91)) {
                strings[j] = c + 32;
            }
            else {
                strings[j] = c;
            }
        }
        else if (c == 28 && !ignoreNext) {
            ignoreNext = 1;
        }
        else {
            ignoreNext = 0;
        }
    }

    strings[j + 1] = 0;
    
    addIndex (wIndex);
    return wIndex;
}

function int getString (int index) {
    int ret = "";
    int i = 0; int j; int c;
    
    if (getIndex (index) == -1) {
        return StrParam (s:"ERR");
    }

    while (1) {
        j = i + index;
        i += 1;

        c = strings[j];

        if (c == 0) {
            break;
        }

        ret = StrParam (s:ret, c:c);
    }
    
    return ret;
}

function void freeString (int index) {
    int i = 0; int j; int c;
    
    if (getIndex (index) == -1) {
        return;
    }

    while (1) {
        j = i + index;

        c = strings[j];

        if (c == 0) {
            break;
        }

        strings[j] = 0;
        i += 1;
    }

    freeIndex (index);
}

function int stringLength (int index) {
    int i = 0; int j; int c;
    
    if (getIndex (index) == -1) {
        return -1;
    }

    while (1) {
        j = i + index;

        c = strings[j];

        if (c == 0) {
            break;
        }
        
        i += 1;
    }
    
    return i;
}

function int reallocString (int index, int string) {
    freeString (index);
    return addString (string);
}

function int reallocCleanString (int index, int string) {
    freeString (index);
    return addCleanString (string);
}

function int reallocLowerString(int index, int string) {
    freeString (index);
    return addLowerString (string);
}



function int findFreeIndex (int size) {
    int c; int i = -1; int index = 0; int ret;

    while (1) {
        c = strings[index];
        
        if (c == 0) {
            if (i == 0) {
                ret = index;
            }

            i += 1;
        }
        else {
            i = -1;
        }

        if (i >= (size - 1)) {
            break;
        }

        index += 1;
    }

    return ret;
}

function int addIndex (int index) {
    int i = 0;
    while (1) {
        if (stringIndex[i] == (index + 1)) {
            break;
        }
        else if (stringIndex[i] == 0) {
            stringIndex[i] = (index + 1);
            break;
        }
        i += 1;
    }

    return i;
}

function int getIndex (int index) {
    int i = 0;

    while (1) {
        if (stringIndex[i] == (index + 1)) {
            break;
        }
        else if (stringIndex[i] == 0) {
            return -1;
        }

        i += 1;
    }

    return i;
}

function void freeIndex (int index) {
    int curIndex = getIndex (index);
    
    if (curIndex == -1) {
        return;
    }

    int i = curIndex + 1;
    int j = i;

    stringIndex[curIndex] = 0;

    while (1) {
        if (stringIndex[i] == 0) {
            break;
        }
        j = i;
        i += 1;
    }
    
    stringIndex[curIndex] = stringIndex[j];
    stringIndex[j] = 0;
}


function int dumpStrings (int stop) {
    int printStr = "";
    int i = 0; int strsFound = 0; int stopAtZero = 0;
    
    if (stop == 0) {
        stop = 0x7FFFFFFF;
        stopAtZero = 1;
    }

    while (i < stop) {
        if (stringIndex[i] != 0) {
            strsFound++;
            printStr = StrParam (s:printStr, s:"(", d:i, s:", ", d:stringIndex[i], s:"): ", s:getString (stringIndex[i] - 1), s:"\n");
        }
        else if (stopAtZero) {
            break;
        }
        i += 1;
    }
    
    if (strsFound == 0) {
        printStr = StrParam (s:"<NONE>"); // For consistency reasons, we use StrParam here
    }

    return printStr;
}

function int padStringR (int baseStr, int padChar, int len) {
    int baseStrLen = StrLen (baseStr);
    int pad = "";
    int padLen; int i;

    if (baseStrLen >= len) {
        return baseStr;
    }
    
    padChar = GetChar (padChar, 0);
    padLen = len - baseStrLen;

    for (i = 0; i < padLen; i++) {
        pad = StrParam (s:pad, c:padChar);
    }

    return StrParam (s:baseStr, s:pad);
}

function int padStringL (int baseStr, int padChar, int len) {
    int baseStrLen = StrLen (baseStr);
    int pad = "";
    int padLen; int i;

    if (baseStrLen >= len) {
        return baseStr;
    }
    
    padChar = GetChar (padChar, 0);
    padLen = len - baseStrLen;

    for (i = 0; i < padLen; i++) {
        pad = StrParam (s:pad, c:padChar);
    }

    return StrParam (s:pad, s:baseStr);
}

function int changeString (int string, int repl, int where) {
    int i; int j; int k;
    int ret = "";
    int len = StrLen (string);
    int rLen = StrLen (repl);

    if ((where + rLen < 0) || (where >= len)) {
        return string;
    }
    
    for (i = 0; i < len; i++) {
        if (inRange(where, where+rLen, i)) {
            ret = StrParam (s:ret, c:GetChar(repl, i-where));
        }
        else {
            ret = StrParam (s:ret, c:GetChar(string, i));
        }
    }

    return ret;
}

function int sliceString (int string, int start, int end) {
    int len = StrLen (string);
    int ret = "";
    int i;

    if (start < 0) {
        start = len + start;
    }

    if (end <= 0) {
        end = len + end;
    }

    start = max (0, start);
    end   = min (end, len-1);
    
    for (i = start; i < end; i++) {
        ret = StrParam (s:ret, c:GetChar (string, i));
    }

    return ret;
}