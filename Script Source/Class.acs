script "FDNightvision" ENTER { // Nightvision system
	// Not needed or desired in TitleMaps.
	if (gameType () == Game_Title_Map)
		terminate;
	// FDNightvisionOn is used to turn on nightvision,
	// NVBattery is the nightvision battery
	int pln = playerNumber();
	int FDNVTics = 0; // tic counter, used for taking battery and other tic related things
	
	while (TRUE) {
		if (getActorProperty (0, APROP_HEALTH) <= 0) { // If the player is dead and nightvision is active
			takeInventory ("PowerNightvision", 99999); // take PowerNightvision
			takeInventory ("FDNightvisionOn", 99999); // take FDNightvisionOn
		}		
		if (FDNVTics == 52 && checkInventory ("NightvisionUpgrade") == 0) // if the tic counter is on tic 52(or whatever number is used on the comparison)...
			FDNVTics = 0; // reset the counter
		else if (FDNVTics == 70 && checkInventory ("NightvisionUpgrade") == 1)
			FDNVTics = 0;
		else if (FDNVTics == 87 && checkInventory ("NightvisionUpgrade") == 2)
			FDNVTics = 0;
		if (checkInventory ("FDNightvisionOn") != 0 && checkInventory ("NVBattery") != 0) { // if nightvision is on and there's usable battery...
			giveInventory ("PowerNightvision", 1); // turn on nightvision
			if (FDNVTics == 0) // if FDNVTics is zero...
				takeInventory ("NVBattery", 1); // take one battery point
		}
		else if (checkInventory ("FDNightvisionOn") != 0 && checkInventory ("NVBattery") == 0) { // if nightvision is on and there's no usable battery
			takeInventory ("PowerNightvision", 1); // take PowerNightvision
			takeInventory ("FDNightvisionOn", 1); // take FDNightvisionOn
			activatorSound ("Nightvision/Off", 127); // play turning off sound
		}
		else if (checkInventory ("FDNightvisionOn") == 0) { // if nightvision is off, turn off nightvision and take FDNightvisionON
			takeInventory ("PowerNightvision", 1);
			takeInventory ("FDNightvisionOn", 1);
		}		
		delay (1);
		if (checkInventory ("FDNightvisionOn") != 0) // if nightvision on...
			FDNVTics++; // add one tic.
	}
}

global int 51:FD_SS_OldSpeed [];
global int 52:FD_SS_Sprinting [];
global int 53:FD_SR_StaminaEmpty [];
script "FDSprintSystem" ENTER {
	if (gameType () == Game_Title_Map)
		terminate;
	
	int tics = 0;
	while (TRUE) {
		if (checkWeapon ("SprintWeapon") && FD_SS_Sprinting [playerNumber ()] == 0) {
			setActorProperty (0, APROP_SPEED, FD_SS_OldSpeed [playerNumber ()]);
			FD_SS_Sprinting [playerNumber ()] = 0;
			tics = 0;
			disableWeapon ("SprintWeapon", "FDSprinting");
		}
		if (keyDown (BT_USER1) && FD_SS_Sprinting [playerNumber ()] == 0 && checkInventory ("FDStamina") >= 5 && !FD_SR_StaminaEmpty [playerNumber ()]) {
			FD_SS_Sprinting [playerNumber ()] = 1;
			FD_SS_OldSpeed [playerNumber ()] = getActorProperty (0, APROP_SPEED);
			disableWeapon ("SprintWeapon", "FDSprinting");
		}
		if (keyUp (BT_USER1) && FD_SS_Sprinting [playerNumber ()] && !FD_SR_StaminaEmpty [playerNumber ()]) {
			setActorProperty (0, APROP_SPEED, FD_SS_OldSpeed [playerNumber ()]);
			FD_SS_Sprinting [playerNumber ()] = 0;
			tics = 0;
			disableWeapon ("SprintWeapon", "FDSprinting");
		}
		if (checkInventory ("FDSprinting") && FD_SS_Sprinting [playerNumber ()]) {
			if (checkInventory ("FDStamina") >= 5)
			{
				if (checkInventory ("FDSprinting") && tics >= 5) {
					tics = 0;
					if (!checkInventory ("PowerAgilityRune") && getVelocity () > 0)
						takeInventory ("FDStamina", 5);
				}
				if (checkInventory ("FDStamina") < 5) {
					setActorProperty (0, APROP_SPEED, FD_SS_OldSpeed [playerNumber ()]);
					FD_SS_Sprinting [playerNumber ()] = 0;
					FD_SR_StaminaEmpty [playerNumber ()] = 1;
					disableWeapon ("SprintWeapon", "FDSprinting");
					restart;
				}
				if (checkInventory ("FDSprinting") && ((abs (getPlayerInput (-1, INPUT_FORWARDMOVE)) > 6400) || (abs (getPlayerInput (-1, INPUT_SIDEMOVE)) > 6400)))
					setActorProperty (0, APROP_SPEED, 1.6);
				else if (checkInventory ("FDSprinting") && !((abs (getPlayerInput (-1, INPUT_FORWARDMOVE)) > 6400) || (abs (getPlayerInput (-1, INPUT_SIDEMOVE)) > 6400)))
					setActorProperty (0, APROP_SPEED, 2.6);
				else if (!checkInventory ("FDSprinting"))
					setActorProperty (0, APROP_SPEED, FD_SS_OldSpeed [playerNumber ()]);
			}
		}
		
		delay (1);
		
		if (FD_SS_Sprinting [playerNumber ()])
			tics++;
	}
}

script "FD_StaminaRegeneration" ENTER {
	// Not needed or desired in TitleMaps.
	if (gameType () == Game_Title_Map)
		terminate;
	
	int pln = playerNumber ();
	int staminaTics = 0;
	int staminaAmount, health, maxStamina;
	
	while (TRUE) {
		staminaAmount = checkInventory ("FDStamina");
		health = getActorProperty (0, APROP_HEALTH);
		maxStamina = checkInventoryMax ("FDStamina");
		if (checkInventory ("PowerAgilityRune") && staminaAmount != maxStamina)
			giveInventory ("FDStamina", 100000);
		if (health > 50 && staminaTics >= 2 && !checkWeapon ("SprintWeapon")) {
			staminaTics = 0;
			giveInventory ("FDStamina", 1);
		}
		if (health <= 50 && staminaTics >= 5 && !checkWeapon ("SprintWeapon")) {
			staminaTics = 0;
			giveInventory ("FDStamina", 1);
		}
		if (staminaTics > 0 && staminaAmount == maxStamina || staminaTics > 0 && checkWeapon ("SprintWeapon"))
			staminaTics = 0;			
		if (FD_SR_StaminaEmpty [playerNumber ()] == 1 && staminaAmount >= 50)
			FD_SR_StaminaEmpty [playerNumber ()] = 0;
		
		delay(1);
		if (staminaAmount != maxStamina)
			if (!checkWeapon ("SprintWeapon"))
				staminaTics++;
	}
}