// Config saving
public void Save2 (string path, string file) {
	List<string> data = new List<string> ();
	List<string> data2 = new List<string> ();
			
	try {
		if (!Directory.Exists (path))
			Directory.CreateDirectory (path);

		FieldInfo [] fields = this.GetType ().GetFields ();

		foreach (FieldInfo field in fields) {
			if (field.Name.Equals ("ConfigName")) {
				data2.Add (field.Name + " ► " + field.GetValue (this));
			} else if (field.Name.Equals ("CFGFilePath") || field.Name.Equals ("ProgramPath") || field.Name.Equals (PatchesPath))
				continue;
			else {
				if (field.FieldType == typeof (List<string>)) {
					List<string> strings = (List<string>) field.GetValue (this);
					List<string> StringList = new List<string> ();

					StringList.Add (field.Name + " ► " + strings.Count + " ► {");
					foreach (string line in strings)
						StringList.Add (line);
					StringList.Add ("}");

					data.AddRange (StringList);
				} else
					data.Add (field.Name + " ► " + field.GetValue (this));
			}
		}

		foreach (string line in data)
			Debug.WriteLine (line);
		//File.Delete (CFGFilePath + file + ".cfg");
		File.WriteAllLines (path + file + ".cfg", data);
	} catch (Exception e) {
		Utils.ShowError (e);
	}
}

// Config loading
try {
				if (!Directory.Exists (CFGFilePath))
					Directory.CreateDirectory (CFGFilePath);

				if (File.Exists (CFGFilePath + file + ".cfg")) {
					FieldInfo [] fields = this.GetType ().GetFields ();
					List<string> lines = File.ReadAllLines (CFGFilePath + file + ".cfg").ToList ();

					foreach (string option in lines) {
						int lineNumber = lines.FindIndex (x => x.Equals (option));

						string [] s = option.Split ('►');

						if (s.Length < 2)
							continue;

						for (int i = 0; i < s.Count (); i++)
							s [i] = s [i].Trim ();

						if (s [0].Equals ("ConfigName") || s [0].Equals ("CFGFilePath") || s [0].Equals ("ProgramPath") || field.Name.Equals (PatchesPath))
							continue;

						FieldInfo field = fields.FirstOrDefault (o => o.Name == s [0]);

						if (field != null) {
							// Basic Types
							if (field.FieldType == typeof (bool))
								field.SetValue (this, bool.Parse (s [1]));
							if (field.FieldType == typeof (int))
								field.SetValue (this, int.Parse (s [1]));
							if (field.FieldType == typeof (float))
								field.SetValue (this, float.Parse (s [1]));
							if (field.FieldType == typeof (Trilean))
								field.SetValue (this, Trilean.Parse (s [1]));
							if (field.FieldType == typeof (string))
								field.SetValue (this, s [1]);

							// String List
							if (field.FieldType == typeof (List<string>)) {
								int lineCount = int.Parse (s [1]);
								List<string> listContents = new List<string> ();

								for (int i = 0; i < lineCount; i++)
									if (!lines [lineNumber + 1 + i].StartsWith ("}"))
										listContents.Add (lines [lineNumber + 1 + i]);

								field.SetValue (this, listContents);
							}
						}
					}
				} else
					Save (file);
			} catch (Exception e) {
				Utils.ShowError (e);
			}