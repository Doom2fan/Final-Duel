Actor EnforcerFire2       : Boolean { }
Actor EnforcerReloadLCR   : Boolean { }
Actor EnforcerReloadRCR   : Boolean { }
Actor Enforcer            : FDWeapon {
	Tag "$TAGENFORCER"
	Obituary "$OBENFORCER"
	Inventory.RestrictedTo MarineClass
	Weapon.AmmoType1 "EnforcerClipR"
	Weapon.AmmoType2 "EnforcerClipL"
	Weapon.AmmoGive1 0
	Weapon.AmmoGive2 0
	Weapon.AmmoUse1 0
	Weapon.AmmoUse2 0
	Weapon.Kickback 75
	Weapon.UpSound "Weapons/enforcerup"
	// AttackSound "Weapons/enforcerfire"
	+Weapon.NoAlert
	States {
	Ready:
		TNT1 A 0 A_GiveInventory ("SynthFireActive", 1) // Give Synthfire token
		TNT1 A 0 ACS_NamedExecuteAlways ("FDSynthFire", 0) // Start Synthfire ACS
		TNT1 AA 1 A_GunFlash ("RightFAK", GFF_NOEXTCHANGE) // Start Synthfire DECORATE
		ENFS EDCBA 1
	LeftReady:
		TNT1 A 0 A_JumpIfInventory ("DropDatWeapon", 1, "DropWeapon")
		TNT1 A 0 A_JumpIfInventory ("Kicking", 1, "Kicking")
		TNT1 A 0 A_JumpIfInventory ("Taunting", 1, "Taunt")
		TNT1 A 0 A_JumpIfInventory ("SynthFireLeft", 1, "LeftFire")
		ENF1 A 1 A_WeaponReady (WRF_NOFIRE|WRF_ALLOWZOOM|CallACS ("FDSynthFireAllowChange") * WRF_NOSWITCH)
		TNT1 A 0 A_JumpIfInventory ("SynthFireLeft", 1, "LeftFire") // Firing is more important than kicking and taunting, so it's the only one copied.
		ENF1 A 1 A_WeaponReady (WRF_NOFIRE|WRF_ALLOWZOOM|CallACS ("FDSynthFireAllowChange") * WRF_NOSWITCH)
		TNT1 A 0 A_TakeInventory ("PressingZoom", 999)
		Loop
	RightFAK:
		TNT1 AAAAAA 1 // Wait while the selection animation plays
	RightReady:
		TNT1 A 0 A_GiveInventory ("SynthFireRightReady", 9999)
		TNT1 A 0 A_JumpIfInventory ("Reloading", 1, "RightReload")
		ENF2 A 1 NoFastWeaps A_JumpIfInventory ("SynthFireRight", 1, "RightFire") // The NoFastWeaps keyword is here so it doesn't glitch when sv_fastweapons is on
		Loop
	DropWeapon:
		TNT1 A 0 A_TakeInventory ("DropDatWeapon", 1)
		TNT1 A 0 ACS_NamedExecute ("FD_CannotDropThisWeapon", 0)
		Goto LeftReady
	Deselect:
		TNT1 A 0 A_TakeInventory ("SynthFireActive", 1)
		TNT1 A 0 A_TakeInventory ("SynthFireLeft", 1)
		TNT1 A 0 A_TakeInventory ("SynthFireRight", 1)
		TNT1 A 0 A_GunFlash ("KillSynthFire", GFF_NOEXTCHANGE)
		TNT1 A 0 A_JumpIfHealthLower (0, "DeselectDEAD")
		ENFS ABCDE 1
		ENFS E 0 A_Lower
		Wait
	Select:
		TNT1 A 0 A_Raise
		Wait
	Fire:
		Goto LeftReady
	LeftFire:
		TNT1 A 0 A_JumpIfInventory ("EnforcerClipL", 1, 1) // Check for EnforcerClipL...
		Goto LeftDryFire // Jump to LeftDryfire if EnforcerClipL is zero
		ENF1 A 1
		TNT1 A 0 A_AlertMonsters
		TNT1 A 0 A_FireCustomMissile ("PistolTracer", frandom (-2.0, 3.0), 1, -10, 1, 0, frandom (-3.0, 3.0)) // Fire a pistol tracer
		TNT1 A 0 A_PlaySound ("Weapons/enforcerfire", CHAN_WEAPON) // Play the firing sound on channel CHAN_WEAPON
		TNT1 A 0 A_FireCustomMissile ("9mmCasingSpawn2", 5, 0, -11, -4) // Spawn a casing
		TNT1 A 0 A_ChangeVelocity (Cos (Pitch) * -0.1, 0, Sin (Pitch) * 0.1, 1) // Recoil
		TNT1 A 0 A_SetPitch (pitch - 0.25, SPF_INTERPOLATE) // Muzzle climb
		TNT1 A 0 A_TakeInventory ("EnforcerClipL", 1) // Take a bullet from the loaded clip
		ENF1 BB 1 Bright A_SetPitch (pitch - 0.125, SPF_INTERPOLATE)
		ENF1 C 3
		Goto LeftReady
	RightFire:
		TNT1 A 0 A_TakeInventory ("SynthFireRightReady", 9999)
		TNT1 A 0 A_JumpIfInventory ("EnforcerClipR", 1, 1) // Check for EnforcerClipR...
		Goto RightDryFire // Jump to RightDryFire if EnforcerClipR is zero
		ENF2 A 1
		TNT1 A 0 A_AlertMonsters
		TNT1 A 0 A_FireCustomMissile ("PistolTracer", frandom (-2.0, 3.0), 1, 10, 1, 0, frandom (-3.0, 3.0)) // Fire a pistol tracer
		TNT1 A 0 A_PlaySound ("Weapons/enforcerfire", 5) // Play the firing sound on channel 5
		TNT1 A 0 A_FireCustomMissile ("9mmCasingSpawn2", 5, 0, 20, -4) // Spawn a casing
		TNT1 A 0 A_ChangeVelocity (Cos (Pitch) * -0.1, 0, Sin (Pitch) * 0.1, 1) // Recoil
		TNT1 A 0 A_SetPitch (pitch - 0.25, SPF_INTERPOLATE) // Muzzle climb
		TNT1 A 0 A_TakeInventory ("EnforcerClipR", 1) // Take a bullet from the loaded clip
		ENF2 BB 1 Bright A_SetPitch (pitch - 0.125, SPF_INTERPOLATE)
		ENF2 C 3
		Goto RightReady
	LeftDryFire:
		ENF1 A 12 A_PlaySound ("Weapons/empty", 6)
		TNT1 A 0 A_JumpIfInventory ("EnableAutoReload", 1, "LeftReload")
		Goto LeftReady
	RightDryFire:
		ENF2 A 12 A_PlaySound ("Weapons/empty", 7)
		TNT1 A 0 A_JumpIfInventory ("EnableAutoReload", 1, "RightReload")
		Goto RightReady
	Zoom:
		TNT1 A 0 A_JumpIfInventory ("PressingZoom", 1, "LeftReady")
		TNT1 A 0 A_GiveInventory ("PressingZoom", 1)
	LeftReload:
		TNT1 A 0 A_JumpIfInventory ("EnforcerReloadRCR", 1, "LeftReloadEnd")
		TNT1 A 0 A_JumpIfInventory ("PistolMag", 1, 1)
		TNT1 A 0 A_GiveInventory ("EnforcerReloadLCR", 1)
		ENF1 A 3
		TNT1 A 0 A_JumpIfInventory ("PistolMag", 1, 1)
		Goto LeftReloadEnd
		TNT1 A 0 A_JumpIfInventory ("EnforcerClipL", 15, "LeftReloadEnd")
		TNT1 A 0 A_PlaySound ("Weapons/EnforcerOut", CHAN_WEAPON)
		ENF1 DEFGHIJ 1
		TNT1 A 0 A_FireCustomMissile ("EmptyClipSpawn", 0, 0, -15, 0)
		ENF1 KL 1
		TNT1 A 0 A_PlaySound ("Weapons/EnforcerIn", CHAN_WEAPON)
		ENF1 MNOPQQ 1
		TNT1 A 0 A_TakeInventory ("PistolMag", 1)
		TNT1 A 0 A_GiveInventory ("EnforcerClipL", 15)
	LeftReloadEnd:
		TNT1 A 0 A_TakeInventory ("EnforcerReloadLCR", 9999)
		Goto LeftReady
	RightReload:
		TNT1 A 0 A_TakeInventory ("SynthFireRightReady", 9999)
		ENF2 A 3 A_TakeInventory ("Reloading", 1)
		TNT1 A 0 A_JumpIfInventory ("EnforcerReloadLCR", 1, "RightReloadEnd")
		TNT1 A 0 A_JumpIfInventory ("PistolMag", 1, 1)
		TNT1 A 0 A_GiveInventory ("EnforcerReloadRCR", 1)
		TNT1 A 0 A_JumpIfInventory ("PistolMag", 1, 1)
		Goto RightReloadEnd
		TNT1 A 0 A_JumpIfInventory ("EnforcerClipR", 15, "RightReloadEnd")
		TNT1 A 0 A_PlaySound ("Weapons/EnforcerOut", 5)
		ENF2 DEFGHIJ 1		
		TNT1 A 0 A_FireCustomMissile ("EmptyClipSpawn", 0, 0, 15, 0)
		ENF2 KL 1
		TNT1 A 0 A_PlaySound ("Weapons/EnforcerIn", 5)
		ENF2 MNOPQQ 1
		TNT1 A 0 A_TakeInventory ("PistolMag", 1)
		TNT1 A 0 A_GiveInventory ("EnforcerClipR", 15)
	RightReloadEnd:
		TNT1 A 0 A_TakeInventory ("EnforcerReloadRCR", 9999)
		Goto RightReady
	}
}

Actor EnforcerClipR : Ammo {
	Inventory.MaxAmount 16
	Ammo.BackpackMaxAmount 16
	+IgnoreSkill
}

Actor EnforcerClipL : Ammo {
	Inventory.MaxAmount 16
	Ammo.BackpackMaxAmount 16
	+IgnoreSkill
}